# syntax=docker/dockerfile:1.4

ARG WHEEL_ARCH
ARG PYTHON_VERSION

FROM scratch as ccache

# these must be injected by bake
FROM scratch as cmake
FROM scratch as swig
FROM scratch as ortools-src


FROM --platform=linux/amd64 python:${PYTHON_VERSION}-slim-buster as ortools-builder-base

RUN <<EOT
#!/bin/bash -ex
apt-get update
apt-get install --no-install-recommends -y \
   ca-certificates ccache
update-ca-certificates
EOT

WORKDIR /src

# setup ccache
ENV PATH="/usr/lib/ccache:$PATH" CCACHE_DIR="/ccache"

# install cmake
COPY --link --from=cmake / /

# install swig
COPY --link --from=swig / /

WORKDIR /src/or-tools

COPY --link --from=ortools-src / .


# cross-compiler helper
FROM --platform=linux/amd64 tonistiigi/xx AS xx


# build or-tools
FROM ortools-builder-base as ortools-builder

# setup cross-compiler scripts
COPY --from=xx / /

ARG TARGETPLATFORM
ARG WHEEL_ARCH

RUN apt-get install --no-install-recommends -y \
      git ninja-build clang lld make

RUN xx-apt-get install --no-install-recommends -y libstdc++-8-dev libc6-dev llvm

COPY ./cmake-glpk-v9.3.patch .

COPY ./bdist-wheel-cross.patch .

RUN <<EOT
#!/bin/bash -ex
export PATH="/root/.local/bin:$PATH"
git apply ./cmake-glpk-v9.3.patch
git apply ./bdist-wheel-cross.patch
xx-clang --setup-target-triple
# for some reason you have to do this twice for -DPYTHON_MODULE_EXTENSION to
# take effect :(
for i in {1..2}; do
cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release \
  -DBUILD_DEPS=ON -DUSE_GLPK=ON -DBUILD_GLPK=ON -DBUILD_FLATZINC=OFF \
  -DBUILD_PYTHON=ON -DBUILD_SAMPLES=OFF -DBUILD_EXAMPLES=OFF \
  -DFETCH_PYTHON_DEPS=ON \
  -DBUILD_TESTING=OFF \
  -DCMAKE_C_COMPILER=clang \
  -DCMAKE_CXX_COMPILER=clang++ \
  -DCMAKE_ASM_COMPILER=clang \
  -DPKG_CONFIG_EXECUTABLE="$(xx-clang --print-prog-name=pkg-config)" \
  -DCMAKE_C_COMPILER_TARGET="$(xx-clang --print-target-triple)" \
  -DCMAKE_CXX_COMPILER_TARGET="$(xx-clang++ --print-target-triple)" \
  -DCMAKE_ASM_COMPILER_TARGET="$(xx-clang --print-target-triple)" \
  -DCMAKE_STRIP=/usr/bin/$(xx-info)-strip \
  -DPYTHON_BDIST_WHEEL_EXTRA_ARGS="--plat-name=linux-${WHEEL_ARCH}" \
  -DPYTHON_MODULE_EXTENSION="$(python-config --extension-suffix | sed s/x86_64/${WHEEL_ARCH}/)"
done
EOT

RUN \
  --mount=type=cache,target=/ccache,from=ccache \
  --mount=type=cache,target=/lock,id=lock-$TARGETPLATFORM,sharing=locked <<EOT
#!/bin/bash -ex
xx-clang --setup-target-triple
export PATH="/root/.local/bin:$PATH"
cmake --build build --parallel 8
cp -r --dereference /ccache /ccache-export
EOT


# package up a manylinux wheel
FROM python:${PYTHON_VERSION}-slim-buster as tester

ARG TARGETPLATFORM
ARG WHEEL_ARCH

RUN apt-get update && apt-get install --no-install-recommends -y patchelf

WORKDIR /dist

COPY --from=ortools-builder /src/or-tools/build/python/dist .

RUN <<EOT
#!/bin/bash -ex

pip install auditwheel

mkdir -p /wheelhouse

auditwheel show *.whl

plat="manylinux_2_27_${WHEEL_ARCH}"
auditwheel repair --plat "$plat" *.whl -w /wheelhouse

EOT

RUN pip install /wheelhouse/*.whl

COPY ./test_ortools.py .

RUN python test_ortools.py


FROM scratch as output

WORKDIR /wheelhouse

COPY --from=tester /wheelhouse/*.whl .

COPY --from=ortools-builder /ccache-export /ccache
